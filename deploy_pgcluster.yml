---

- name: Deploy PostgreSQL HA Cluster (based on Patroni with DNS Connection Point)
  hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  tags: always
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
#    - name: "Set variable: ansible_python_interpreter"
#      ansible.builtin.set_fact:
#        ansible_python_interpreter: "/usr/bin/env python3"
#      when: "'python3' not in (ansible_python_interpreter | default(''))"
#      tags: always

    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include Astra Linux specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: ansible_os_family is search("Astra Linux")

    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'

  roles:
    - role: pre-checks
      vars:
        minimal_ansible_version: 2.7.0
      tags: always

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian"

    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian"


# Deploy etcd cluster
- name: deploy_pgcluster.yml | Deploy etcd cluster
  ansible.builtin.import_playbook: deploy_etcdcluster.yml
  tags: etcd

# SSL: Obtaining the Private IP Addresses of Managed Nodes
- hosts: postgres_cluster
  become: true
  become_method: sudo
  any_errors_fatal: true
  tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - shell: ip -f inet addr show "{{ postgresql_ifname }}" | sed -En -e 's/.*inet ([0-9.]+).*/\1/p'
      register: patroni_privateIP

# PKI
- name: deploy_pgcluster.yml | Deploy CA if ca.key file non exist
  hosts: localhost
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: "Check for CA private key exists.."
      stat:
        path: "{{ pki_cert_artifacts_dir }}/ca.key"
      register: pki_ca_key

    - name: "File exist"
      debug:
        msg: "ca.key exist, deploy new Root CA skipping"
      when: pki_ca_key.stat.exists|bool and pki_ca_key.stat.isreg|bool

    - name: "Ensure CA certificate file exist"
      stat:
        path: "{{ pki_cert_artifacts_dir }}/ca.crt"
      register: pki_ca_cert

    - name: "File not exist"
      debug:
        msg: "ca.crt not exist"
      when: not pki_ca_cert.stat.exists|bool #and not pki_ca_cert.stat.isreg|bool
  roles:
    # Deploy CA if key file non exist
    - role: ca
      when: not pki_ca_key.stat.exists|bool #and not pki_ca_key.stat.isreg|bool
    - role: install-root-cert

# SSL: Generating Patroni cluster members’ Private Keys and CSRs
- name: deploy_pgcluster.yml | Generating Patroni cluster members’ Private Keys and CSRs
  hosts: localhost
  gather_facts: false
  become: true
  any_errors_fatal: true

  tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: "Generate private key for each member"
      openssl_privatekey:
        path: "{{ pki_cert_artifacts_dir }}/{{item}}.key"
        type: RSA
        size: 4096
        state: present
        force: true
      with_items: "{{ groups['postgres_cluster'] }}"

    - name: "Generate CSR for each member"
      openssl_csr:
        path: "{{ pki_cert_artifacts_dir }}/{{item}}.csr"
        privatekey_path: "{{ pki_cert_artifacts_dir }}/{{item}}.key"
        common_name: "{{item}}"
        key_usage:
          - digitalSignature
        extended_key_usage:
          - serverAuth
          - clientAuth
        subject_alt_name:
          - DNS:{{item}}
          - IP:{{ hostvars[item]['patroni_privateIP']['stdout']}}
          - IP:127.0.0.1
        force: true
      with_items: "{{ groups['postgres_cluster'] }}"

    - name: "Generate an etcd member certificate signed with our own CA certificate"
      openssl_certificate:
        path: "{{ pki_cert_artifacts_dir }}/{{item}}.crt"
        csr_path: "{{ pki_cert_artifacts_dir }}/{{item}}.csr"
        ownca_path: "{{ pki_cert_artifacts_dir }}/ca.crt"
        ownca_privatekey_path: "{{ pki_cert_artifacts_dir }}/ca.key"
        provider: ownca
        force: true
      with_items: "{{ groups['postgres_cluster'] }}"

- name: deploy_pgcluster.yml | PostgreSQL Cluster Configuration
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include Astra Linux specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: ansible_os_family is search("Astra Linux")

    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'

    - name: Include PostgreSQL-specific variables
      include_vars: "vars/postgres/PostgreSQL.yml"
      when: postgresql_fork != 'PostgresPro'

    - name: Include PostgresPro-specific variables
      include_vars: "vars/postgres/PostgresPro.yml"
      when: postgresql_fork == 'PostgresPro'

    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian"

    - name: Make sure the gnupg and apt-transport-https packages are present
      apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian"

    - name: Build a firewall_ports_dynamic_var
      set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | bool
      tags: firewall

    - name: Build a firewall_rules_dynamic_var
      set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | bool
      tags: firewall
  roles:
    - role: ansible-role-firewall
      environment: "{{ proxy_env | default({}) }}"
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when: firewall_enabled_at_boot | bool
      tags: firewall

    - role: io-scheduler
    - role: packages
    - role: sudo
    - role: swap
    - role: sysctl
    - role: transparent-huge-pages
    - role: pam-limits
    - role: locales
    - role: timezone
    - role: dnscp
      when: cluster_vip is defined and cluster_vip | length > 0
    - role: install-root-cert

- name: deploy_pgcluster.yml | PostgreSQL Cluster Deployment
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include Astra Linux specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: ansible_os_family is search("Astra Linux")

    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'

    - name: Include PostgreSQL-specific variables
      include_vars: "vars/postgres/PostgreSQL.yml"
      when: postgresql_fork != 'PostgresPro'

    - name: Include PostgresPro-specific variables
      include_vars: "vars/postgres/PostgresPro.yml"
      when: postgresql_fork == 'PostgresPro'

  roles:
    - role: patroni

    # optional
    - role: postgresql-users
      when: is_master | bool and postgresql_users | length > 0

#    - role: postgresql-databases
#      when: is_master | bool and postgresql_databases | length > 0

#    - role: postgresql-schemas
#      when: is_master | bool and postgresql_schemas | length > 0

    - role: postgresql-extensions
      when: is_master | bool and postgresql_extensions | length > 0

#    - role: pgbouncer/config
#      when: pgbouncer_install|bool

    # finish (info)
    - role: deploy-finish
...
