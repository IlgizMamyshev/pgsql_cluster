---
# yamllint disable rule:line-length
# yamllint disable rule:comments-indentation

# Proxy variables (optional) for download packages using a proxy server
proxy_env: {}
#  http_proxy: http://imamyshev:Password@proxy.demo.ru:8080
#  https_proxy: http://imamyshev:Password@proxy.demo.ru:8080
#  no_proxy: "127.0.0.1,localhost,etcd-n1,etcd-n2,etcd-n3,pgsql-n1,pgsql-n2,pgsql-n3"
# -------------------------------------------

# Patroni
patroni_cluster_name: "PGSQL-CL"  # specify the cluster name
patroni_restapi_port: "8008" # Patroni REST API port (Used https protocol in this project!)
patroni_install_version: "latest"  # or specific version (example 1.5.6)
patroni_scripts_dir: "/etc/patroni" # for patroni callback scripts
patroni_superuser_username: "postgres"
patroni_superuser_password: "Password"  # please change password
patroni_replication_username: "replicator"
patroni_replication_password: "Password2"  # please change password
synchronous_mode: true  # or 'true' for enable synchronous database replication
synchronous_mode_strict: false  # if 'true' then block all client writes to the master, when a synchronous replica is not available
synchronous_node_count: 2  # number of synchronous standby databases

# Watchdog support
patroni_with_watchdog: true # true or false

# DNS Connection Point
cluster_vip: "172.16.32.180"  # empty or one VIP address (or some VIP addresses in different subnets, separated by commas, for example: "172.16.32.180,172.16.10.180" ), for client access to PostgreSQL
dnscp:
  vcompname: "{{ patroni_cluster_name }}" # Virtual Computer Name - Client Access Point
  vcomppassword: "Password3" # Password for Virtual Computer Name Account. Empty for anonimous auth to DNS zone.
  #set password example (powershell): Get-ADComputer PGSQL-CL | Set-ADAccountPassword -Reset -NewPassword (ConvertTo-SecureString -AsPlainText "Password3" -Force)
  dnszonefqdn: "demo.ru" # Set DNS zone FQDN (AD Domain FQDN).
  dnsserver: "" # Set FQDN or IP or empty (empty is recommended for automatically detect). Used for register DNS name.
  ttl: "1200" # DNS record TTL in seconds. TTL=1200 - default. Set TTL=30 for multi-site clusters (recommended).
  #Add to ADDS:
  #  sudo hostnamectl set-hostname pgsql-n1
  #  sudo apt-get install astra-ad-sssd-client && astra-ad-sssd-client -d example.ru -u Administrator@example.ru -px

# DCS (Distributed Consensus Store)
dcs_exists: false # 'false' or 'true'. Use 'true' if you do not want to install and configure the etcd cluster
dcs_type: "patroni" # "etcd" or "patroni"

# if dcs_exists: false and dcs_type: "patroni"
patroni_raft_data_dir: "/etc/patroni" #"/var/lib/raft"
patroni_raft_port: "2379"
patroni_raft_password: "Password4" # Key to encrypt Patroni raft traffic

# if dcs_exists: false and dcs_type: "patroni"
with_patroni_raft_controller: true # 'false' or 'true' if you want to install and configure the Patroni RAFT Controller
patroni_raft_controller:
  host: "{{ hostvars[groups['patroni_raft_controller'][0]].inventory_hostname }}" # hostname or IP
  port: "{{ patroni_raft_port }}"

# if dcs_exists: false and dcs_type: "etcd"
etcd_ver: "v3.5.6" # version for deploy etcd cluster
etcd_data_dir: "/var/lib/etcd"
etcd_cluster_name: "etcd-{{ patroni_cluster_name }}"  # ETCD_INITIAL_CLUSTER_TOKEN

# if dcs_exists: true and dcs_type: "etcd"
patroni_etcd_hosts:
  port: "2379"
  protocol: "https" # current solution support only https (Mutual TLS)
  ifname: "eth0"

# more options you can specify in the roles/patroni/templates/patroni.yml.j2
# https://patroni.readthedocs.io/en/latest/SETTINGS.html#etcd

# Load Balancing
with_haproxy_load_balancing: false  # 'false' or 'true' if you want to install and configure the load-balancing
haproxy_listen_port:
  master: 5000
  replicas: 5001
  replicas_sync: 5002
  replicas_async: 5003
  stats: 7000
haproxy_maxconn:
  global: 100000
  master: 10000
  replica: 10000
haproxy_timeout:
  client: "60m"
  server: "60m"

# PostgreSQL variables
postgresql_fork: "PostgresPro" # "PostgreSQL" or "PostgresPro"
postgresql_version: "15" # major version
# postgresql_data_dir: see vars/Debian.yml
postgresql_port: "5432"
postgresql_ifname: "eth0" # forexample "eth0", "bond0" - network interface name on each cluster node
postgresql_encoding: "UTF8"  # for bootstrap only (initdb)
postgresql_locale: "ru_RU.UTF-8" #"en_US.UTF-8"  # for bootstrap only (initdb)
postgresql_data_checksums: true  # for bootstrap only (initdb)
postgresql_allow_group_access: false # for bootstrap only (initdb)
postgresql_password_encryption_algorithm: "scram-sha-256"  # or "md5" if your clients do not work with passwords encrypted with SCRAM-SHA-256


# postgresql parameters to bootstrap dcs (are parameters for example)
postgresql_parameters:
  - {option: "max_connections", value: "200"}
  - {option: "superuser_reserved_connections", value: "5"}
  - {option: "password_encryption", value: "{{ postgresql_password_encryption_algorithm }}"}
  - {option: "deadlock_timeout", value: "5s"}  # 1s is default
  - {option: "max_locks_per_transaction", value: "256"}  # raise this value (ex. 512) if you have queries that touch many different tables (partitioning)
  - {option: "max_prepared_transactions", value: "0"}
  - {option: "huge_pages", value: "try"}  # or "on" if you set "vm_nr_hugepages" in kernel parameters
  - {option: "huge_page_size", value: "0"} # 0 is default
  - {option: "shared_buffers", value: "4GB"} # shared_buffers = 25%-40% of RAM
  - {option: "work_mem", value: "256MB"}  # work_mem = RAM/32..64
  - {option: "maintenance_work_mem", value: "1GB"}  # maintenance_work_mem = work_mem*4
  - {option: "effective_cache_size", value: "4GB"}  # effective_cache_size = RAM - shared_buffers
  - {option: "checkpoint_timeout", value: "30min"} # 5min is default
  - {option: "checkpoint_completion_target", value: "0.9"}
  - {option: "min_wal_size", value: "2GB"}
  - {option: "max_wal_size", value: "8GB"}  # or 16GB/32GB
  - {option: "wal_buffers", value: "-1"}
  - {option: "temp_buffers", value: "32MB"} # 8MB is default
  - {option: "default_statistics_target", value: "100"}
  - {option: "seq_page_cost", value: "1"} # "1" is default, "0.5" for fast SSD storage , "0.1" for NVMe storage.
  - {option: "random_page_cost", value: "2.0"}  # "4" is default, "1.5-2.0" for HDD RAID storage, "1.1-1.3" for SSD storage, "0.5" for fast SSD storage , "0.1" for NVMe storage.
  - {option: "effective_io_concurrency", value: "4"}  # "1" default, "2+" for HDD RAID, "200" for SSD storage, "500-1000" for NVMe storage.
  - {option: "synchronous_commit", value: "on"}  # or 'off' if you can you lose single transactions in case of a crash
  - {option: "autovacuum", value: "on"}  # never turn off the autovacuum!
  - {option: "autovacuum_max_workers", value: "10"} # 3 is default. autovacuum_max_workers = NumCores/4..2 , but >= 4
  - {option: "autovacuum_vacuum_scale_factor", value: "0.05"}  # or 0.005/0.001
  - {option: "autovacuum_analyze_scale_factor", value: "0.1"}
  - {option: "autovacuum_vacuum_cost_limit", value: "1000"}  # or 1000/5000
  - {option: "autovacuum_vacuum_cost_delay", value: "2"}
  - {option: "autovacuum_naptime", value: "1min"}
  - {option: "autovacuum_vacuum_threshold", value: "25"} # 50 is default
  - {option: "max_files_per_process", value: "4096"} # 1000 is default
  - {option: "archive_mode", value: "on"}
  - {option: "archive_timeout", value: "1800s"}
  - {option: "archive_command", value: "cd ."}  # not doing anything yet with WAL-s
  - {option: "wal_level", value: "replica"}
  - {option: "wal_keep_size", value: "8GB"} # 0 is default
  - {option: "max_wal_senders", value: "10"} # max_replication_slots + number of physical replicas
  - {option: "max_replication_slots", value: "10"}
  - {option: "hot_standby", value: "on"}
  - {option: "wal_log_hints", value: "on"} # ignored when postgresql_data_checksums is true
  - {option: "wal_compression", value: "on"}
  - {option: "shared_preload_libraries", value: "pg_stat_statements,auto_explain"}
  - {option: "pg_stat_statements.max", value: "10000"}
  - {option: "pg_stat_statements.track", value: "all"}
  - {option: "pg_stat_statements.track_utility", value: "true"}
  - {option: "pg_stat_statements.save", value: "true"}
  - {option: "auto_explain.log_min_duration", value: "15s"}  # 10 sec (by default). Decrease this value if necessary
  - {option: "auto_explain.log_analyze", value: "true"}
  - {option: "auto_explain.log_buffers", value: "true"}
  - {option: "auto_explain.log_timing", value: "false"}
  - {option: "auto_explain.log_triggers", value: "true"}
  - {option: "auto_explain.log_verbose", value: "true"}
  - {option: "auto_explain.log_nested_statements", value: "true"}
  - {option: "track_io_timing", value: "off"}
  - {option: "log_lock_waits", value: "on"}
  - {option: "log_temp_files", value: "0"}
  - {option: "track_activities", value: "on"}
  - {option: "track_counts", value: "on"}
  - {option: "track_functions", value: "all"}
  - {option: "log_checkpoints", value: "on"}
  - {option: "logging_collector", value: "on"}
  - {option: "log_truncate_on_rotation", value: "on"}
  - {option: "log_rotation_age", value: "1d"}
  - {option: "log_rotation_size", value: "0"}
  - {option: "log_line_prefix", value: "'%t [%p]: [%l-1] %r db=%d,user=%u,app=%a,client=%h'"} #'%t [%p-%l] %r %q%u@%d '
  - {option: "log_filename", value: "'postgresql-%d.log'"} # "'postgresql-%a.log'"
  - {option: "log_directory", value: "{{ postgresql_log_dir }}"}
  - {option: "hot_standby_feedback", value: "on"}  # allows feedback from a hot standby to the primary that will avoid query conflicts
  - {option: "max_standby_streaming_delay", value: "30s"}
  - {option: "wal_receiver_status_interval", value: "10s"}
  - {option: "idle_in_transaction_session_timeout", value: "90min"}  # reduce this timeout if possible
  - {option: "jit", value: "off"}
  - {option: "max_worker_processes", value: "8"}
  - {option: "max_parallel_workers", value: "8"}
  - {option: "max_parallel_workers_per_gather", value: "4"}
  - {option: "max_parallel_maintenance_workers", value: "4"}
#  - {option: "dynamic_shared_memory_type", value: "posix"}
  - {option: "log_timezone", value: "Europe/Moscow"}
#  - {option: "datestyle", value: "iso, dmy"}
  - {option: "timezone", value: "Europe/Moscow"}
#  - {option: "lc_messages", value: "ru_RU.UTF-8"}
#  - {option: "lc_monetary", value: "ru_RU.UTF-8"}
#  - {option: "lc_messages", value: "ru_RU.UTF-8"}
#  - {option: "lc_numeric", value: "ru_RU.UTF-8"}
#  - {option: "lc_time", value: "ru_RU.UTF-8"}
#  - {option: "default_text_search_config", value: "pg_catalog.russian"}

# specify additional hosts that will be added to the pg_hba.conf
postgresql_pg_hba:
  - {type: "local", database: "all", user: "{{ patroni_superuser_username }}", address: "", method: "trust"}
  - {type: "local", database: "all", user: "all", address: "", method: "peer"}
  - {type: "host", database: "all", user: "all", address: "127.0.0.1/32", method: "{{ postgresql_password_encryption_algorithm }}"}
  - {type: "host", database: "all", user: "all", address: "::1/128", method: "{{ postgresql_password_encryption_algorithm }}"}
#  - {type: "host", database: "mydatabase", user: "mydb-user", address: "192.168.0.0/24", method: "{{ postgresql_password_encryption_algorithm }}"}
#  - {type: "host", database: "all", user: "all", address: "192.168.0.0/24", method: "ident", options: "map=main"}  # use pg_ident
#  - {type: "host", database: "all", user: "all", address: "172.16.0.0/16", method: "{{ postgresql_password_encryption_algorithm }}"}
  - {type: "host", database: "all", user: "all", address: "0.0.0.0/0", method: "{{ postgresql_password_encryption_algorithm }}"} # accept all incoming connections

# list of lines that Patroni will use to generate pg_ident.conf
postgresql_pg_ident: []
#  - {mapname: "main", system_username: "postgres", pg_username: "backup"}
#  - {mapname: "", system_username: "", pg_username: ""}


# Extended variables (optional)
patroni_ttl: 30
patroni_loop_wait: 10
patroni_retry_timeout: 10
patroni_maximum_lag_on_failover: 1048576
patroni_master_start_timeout: 300

# https://patroni.readthedocs.io/en/latest/replica_bootstrap.html#standby-cluster
patroni_standby_cluster:
  host: ""  # an address of remote master
  port: "5432"  # a port of remote master
#  primary_slot_name: ""  # which slot on the remote master to use for replication (optional)
#  restore_command: ""  # command to restore WAL records from the remote master to standby leader (optional)
#  recovery_min_apply_delay: ""  # how long to wait before actually apply WAL records on a standby leader (optional)

patroni_log_destination: stderr  # stderr or logfile (stderr recommended)
# if patroni_log_destination: logfile
patroni_log_dir: /var/log/patroni
patroni_log_level: info # info or debug
patroni_log_traceback_level: error # error or debug
patroni_log_format: "%(asctime)s %(levelname)s: %(message)s"
patroni_log_dateformat: ""
patroni_log_max_queue_size: 1000
patroni_log_file_num: 4
patroni_log_file_size: 25000000  # bytes
patroni_log_loggers_patroni_postmaster: warning
patroni_log_loggers_urllib3: warning  # or 'debug'

patroni_postgresql_use_pg_rewind: true  # or 'false'
# try to use pg_rewind on the former leader when it joins cluster as a replica.

patroni_remove_data_directory_on_rewind_failure: false  # or 'true' (if use_pg_rewind: 'true')
# avoid removing the data directory on an unsuccessful rewind
# if 'true', Patroni will remove the PostgreSQL data directory and recreate the replica.

patroni_remove_data_directory_on_diverged_timelines: false  # or 'true'
# if 'true', Patroni will remove the PostgreSQL data directory and recreate the replica
# if it notices that timelines are diverging and the former master can not start streaming from the new master.

# https://patroni.readthedocs.io/en/latest/replica_bootstrap.html#building-replicas
patroni_create_replica_methods:
  - basebackup

basebackup:
  - {option: "max-rate", value: "1000M"}
  - {option: "checkpoint", value: "fast"}

# "restore_command" written to recovery.conf when configuring follower (create replica)
postgresql_restore_command: ""

disable_archive_command: true  # or 'false' to not disable archive_command after restore
keep_patroni_dynamic_json: true  # or 'false' to remove patroni.dynamic.json after restore (if exists)

# PKI
pki_cert_artifacts_dir: "./certs"
...
